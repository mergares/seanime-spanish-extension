{
  "id": "local-animeflv-provider",
  "name": "Local AnimeFLV Provider",
  "description": "Stream anime from a locally hosted jimov API using the AnimeFLV provider with search capability.",
  "manifestURI": "",
  "version": "1.0.0",
  "author": "User",
  "type": "onlinestream-provider",
  "language": "javascript",
  "lang": "multi",
  "payload": "class Provider {\n  api = \\"http://100.91.179.28:3003/anime/flv\\";\n  getSettings() {\n    return { episodeServers: [\\"default\\"], supportsDub: false };\n  }\n  async search(opts) {\n    const res = await fetch(`${this.api}/search/${encodeURIComponent(opts.query)}`);\n    if (!res.ok) return [];\n    return await res.json();\n  }\n  async findEpisodes(id) {\n    const res = await fetch(`${this.api}/name/${id}`);\n    if (!res.ok) return [];\n    const data = await res.json();\n    return data.episodes.map(e => ({ id: e.url.split(\"/\").pop(), number: parseInt(e.number), url: e.url, title: e.name }));\n  }\n  async findEpisodeServer(episode, server) {\n    const res = await fetch(`${this.api}/episode/${episode.id}`);\n    if (!res.ok) throw new Error(\"failed to fetch episode servers\");\n    const eps = await res.json();\n    const ep = eps.servers.find(s => s.name === server) || eps.servers[0];\n    return { server: ep.name, headers: {}, videoSources: [{ url: ep.file_url || ep.url, type: ep.file_url && ep.file_url.endsWith(\".m3u8\") ? \"m3u8\" : \"mp4\", quality: \"default\", subtitles: [] }] };\n  }\n}"  
}
