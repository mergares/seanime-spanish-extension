{
  "id": "local-animeflv-js-manifest",
  "name": "Local AnimeFLV JS Provider",
  "description": "JavaScript-based onlinestream-provider using local jimov AnimeFLV API.",
  "manifestURI": "",
  "version": "1.0.0",
  "author": "You",
  "type": "onlinestream-provider",
  "language": "javascript",
  "lang": "en",
  "payload": "class Provider {\\n  constructor() {\\n    this.baseUrl = \\\"http://100.91.179.28:3003/anime/flv\\\";\\n  }\\n\\n  getSettings() {\\n    return { episodeServers: [\\\"default\\\"], supportsDub: false };\\n  }\\n\\n  async search(opts) {\\n    const res = await fetch(`${this.baseUrl}/search/${encodeURIComponent(opts.query)}`);\\n    if (!res.ok) return [];\\n    const data = await res.json();\\n    return [{ id: data.slug, title: data.name, url: `${this.baseUrl}/name/${data.slug}`, subOrDub: \\\"sub\\\" }];\\n  }\\n\\n  async findEpisodes(id) {\\n    const res = await fetch(`${this.baseUrl}/name/${id}`);\\n    if (!res.ok) return [];\\n    const anime = await res.json();\\n    return anime.episodes.map(ep => ({ id, number: ep.number, url: ep.url, title: ep.name }));\\n  }\\n\\n  async findEpisodeServer(episode, server) {\\n    const res = await fetch(`${this.baseUrl}/episode/${episode.number}`);\\n    if (!res.ok) throw new Error(res.statusText);\\n    const data = await res.json();\\n    const srv = data.servers[0];\\n    return { server: srv.name, headers: {}, videoSources: [{ url: srv.file_url, type: \\\"hls\\\", quality: \\\"auto\\\", subtitles: [] }] };\\n  }\\n}"
}
